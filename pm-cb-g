#!/pro/bin/perl

use 5.14.1;
use warnings;

use Getopt::Long qw( :config no_ignore_case );
use Pod::Usage;

use FindBin;
use lib "$FindBin::Bin/lib";
use PM::CB::GUI;
use PM::CB::Control;

my (%conf, $help);

BEGIN {
    %conf = (
        bg_color      => 'white',
        fg_color      => 'black',
        author_color  => 'blue',
        author_format => '[%s]',
        private_color => 'magenta',
        gesture_color => 'darkgreen',
        time_color    => 'darkcyan',
        seen_color    => 'darkgray',
        font_name     => 'Helvetica',
        char_size     => 12,
        stack_size    => 15,
        mce           => 0,
        no_time       => 0,
        pm_url        => 'www.perlmonks.org',
        date_format   => 'YYYY-MM-DD hh:mm:ss',
        time_format   => '<hh:mm:ss>',
        copy_url      => 'Control-Button-1',
        random_url    => 0);
    # /me considers File::HomeDir overly complicated
    my $home = $ENV{HOME} || $ENV{USERPROFILE} || $ENV{HOMEPATH};
    foreach my $rcf (grep { -s }
            "$home/pm-cb.rc", "$home/.pm-cbrc", "$home/.config/pm-cb") {
        my $mode = (stat $rcf)[2];
        $mode & 022 and next;
        open my $fh, "<", $rcf or next;
        while (<$fh>) {
            m/^\s*[;#]/ and next;
            $mode & 044 && m/password/i and next;
            my ($k, $v) = (m/^\s*([-\w]+)\s*[:=]\s*(.*\S)/) or next;
            $conf{ lc $k
                =~ s{-}{_}gr
                =~ s{[-_]colou?r$}{_color}ir
                =~ s{background}{bg}ir
                =~ s{foreground}{fg}ir
                =~ s{^(?:unicode|utf-?8?)$}{utf8}ir
                =~ s{^use_}{}ir
                =~ s{font_size}{char_size}ir
                =~ s{font_family}{char_name}ir
                =~ s{show_time(?:stamps?)}{show_time}ir
              } = $v
                =~ s{U\+?([0-9A-Fa-f]{2,7})}{chr hex $1}ger
                =~ s{^(?:no|false)$}{0}ir
                =~ s{^(?:yes|true)$}{1}ir;
            }

        }
    exists $conf{show_time} and $conf{no_time} = !delete $conf{show_time};
    $conf{font_name} =~ m/\s/ and $conf{font_name} = "{".$conf{font_name}."}";
    exists $conf{xmodifiers} && !$conf{xmodifiers} and delete $ENV{XMODIFIERS};

    GetOptions(
        'a|author_color=s'  => \$conf{author_color},
        'b|bg_color=s'      => \$conf{bg_color},
        'c|char_size=i'     => \$conf{char_size},
        'f|fg_color=s'      => \$conf{fg_color},
        'F|font_name=s'     => \$conf{font_name},
        'g|gesture_color=s' => \$conf{gesture_color},
        'h|help'            => \$help,
        'm|mce'             => \$conf{mce},
        'n|no_time'         => \$conf{no_time},
        'p|private_color=s' => \$conf{private_color},
        'r|random_url'      => \$conf{random_url},
        's|stack_size=i'    => \$conf{stack_size},
        'S|seen_color=s'    => \$conf{seen_color},
        't|time_color=s'    => \$conf{time_color},
        'u|url=s'           => \$conf{pm_url},
        'U|browse_url=s'    => \$conf{browse_url},
    ) or pod2usage(-verbose => 0, -exitval => 1);
    $conf{browse_url} //= $conf{pm_url};

    pod2usage(-verbose => 1, -exitval => 0) if $help;
}


use if $conf{mce} => 'MCE::Hobo';
use if $conf{mce} => 'MCE::Shared';

use if ! $conf{mce} => threads => (stack_size => 2 ** $conf{stack_size});
use if ! $conf{mce} => 'Thread::Queue';

my ($queue_class, $queue_constructor, $worker_class)
    = $conf{mce}
    ? ('MCE::Shared', 'queue', 'MCE::Hobo')
    : ('Thread::Queue', 'new', 'threads');

my ($to_gui, $to_comm, $to_control)
    = map $queue_class->$queue_constructor, 1, 2, 3;
my $control_t = $worker_class->create(sub {
    my $control = PM::CB::Control->new({to_gui       => $to_gui,
                                        to_comm      => $to_comm,
                                        from_gui     => $to_control,
                                        worker_class => $worker_class,
                                        pm_url       => $conf{pm_url},
                                        random_url   => $conf{random_url}});
    $control->start_comm;
});

my $gui = 'PM::CB::GUI'->new({
    %conf,
    from_comm  => $to_gui,
    to_comm    => $to_comm,
    to_control => $to_control,
    control_t  => $control_t});
$gui->gui;

=head1 NAME

pm-cb-g - A GUI client to PerlMonks' Chatter Box

=head1 SYNOPSIS

  pm-cb-g -a blue -b white -c 12 -f black -F Helvetica
          -p magenta -s 15 -S darkgray -t darkcyan -g darkgreen
          -u www.perlmonks.org -U www.perlmonks.org [ -h -m -n ]

=head1 OPTIONS

Use an integer for I<size>, color name or C<#RRGGBB> code for
I<color>. The default values are shown in the Synopsis above.

=over

=item B<a|author_color> I<color>

The color to display the names of authors of public messages.

=item B<b|bg_color> I<color>

The background color of the application.

=item B<c|char_size> I<size>

The size of all the characters.

=item B<f|fg_color> I<color>

The foreground colour of the new messages.

=item B<F|font_name> I<font>

The font for all the characters.

=item B<g|gesture_color> I<color>

The foreground colour to display the names of gesture authors (C</me>).

=item B<h|help>

Prints options and arguments.

=item B<m|mce>

Use L<MCE::Shared> and L<MCE::Hobo> instead of L<threads> and
L<Thread::Queue>.

=item B<n|no_time>

Don't show time stamps.

=item B<p|private_color> I<color>

The color for the authors of private messages.

=item B<r|random_url>

Change the PM URL randomly time to time (should prevent lag).

=item B<s|stack_size> I<size>

Needed for L<threads>. Use a higher number if the program doesn't work
with the default value.

=item B<S|seen_color> I<color>

The color for already read messages.

=item B<t|time_color> I<color>

The color for time stamps.

=item B<u|url> I<[www.]perlmonks.(com|net|org)>

The address to use to communicate with PerlMonks.

=item B<U|browse_url> I<[www.]perlmonks.(com|net|org)>

The address to use to open PerlMonks links in the browser. Same as
B<url> if not specified.

=back
