#!/usr/bin/perl
use warnings;
use strict;
use feature qw{ say };


use Getopt::Long qw( :config no_ignore_case );
use Pod::Usage;

my ($bg_color, $fg_color, $author_color, $private_color, $time_color,
    $font_name, $char_size, $stack_size, $seen_color, $mce, $no_time, $help);

BEGIN {
    ($bg_color, $fg_color, $author_color, $private_color, $time_color,
     $seen_color, $font_name, $char_size, $stack_size, $mce, $no_time, $help)
    = qw( white black blue magenta darkcyan darkgray Helvetica 12 15 0 0 0);

    GetOptions(
        'a|author_color=s'  => \$author_color,
        'b|bg_color=s'      => \$bg_color,
        'c|char_size=i'     => \$char_size,
        'f|fg_color=s'      => \$fg_color,
        'F|font_name=s'     => \$font_name,
        'h|help'            => \$help,
        'm|mce'             => \$mce,
        'n|no_time'         => \$no_time,
        'p|private_color=s' => \$private_color,
        's|stack_size=i'    => \$stack_size,
        'S|seen_color=s'    => \$seen_color,
        't|time_color=s'    => \$time_color,
    ) or pod2usage(-verbose => 0, -exitval => 1);

    pod2usage(-verbose => 1, -exitval => 0) if $help;
}


use if $mce => 'MCE::Hobo';
use if $mce => 'MCE::Shared';

use if ! $mce => threads => (stack_size => 2 ** $stack_size);
use if ! $mce => 'Thread::Queue';

my ($queue_class, $queue_constructor, $worker_class, $running)
    = $mce
    ? ('MCE::Shared', 'queue', 'MCE::Hobo', sub { $_[0]->list_running} )
    : ('Thread::Queue', 'new', 'threads',
       sub { $_[0]->list(threads::running())});

my ($readQ, $writeQ) = map $queue_class->$queue_constructor, 1, 2;
my $communicate_t = $worker_class->create(\&communicate);


use constant {
    PM_URL        => 'http://www.perlmonks.org/bare/?node_id=',
    PM_BROWSE_URL => 'http://www.perlmonks.org/?node_id=',
    FREQ          => 7,
    # Node ids:
    LOGIN         => 109,
    CB            => 207304,
    SEND          => 227820,
    PRIVATE       => 15848,
};

use constant TITLE => 'PM::CB::G';

gui();


sub communicate {
    require XML::LibXML;
    require WWW::Mechanize;
    require Time::HiRes;

    my $mech = 'WWW::Mechanize'->new( timeout => 16, autocheck => 0 );

    my ($from_id, $previous, %seen);

    my $last_update = -1;
    my ($message, $command);
    my %dispatch = (
        login => sub { login($mech, @$message)
                           or $readQ->enqueue(['login']) },
        send  => sub { $message->[0] =~ tr/\x00-\x20/ /s;
                       send_message($mech, $message->[0]) },
        title => sub { get_title($mech, @$message) },
        quit  => sub { no warnings 'exiting'; last },
    );

    while (1) {
        if ($message = $writeQ->dequeue_nb) {
            $command = shift @$message;
            $dispatch{$command}->();
        }

        Time::HiRes::usleep(250_000);
        next if time - $last_update < FREQ;

        $last_update = time;

        my $url = PM_URL . CB;
        $url .= ";fromid=$from_id" if defined $from_id;
        $mech->get($url);

        my $xml;
        if (eval {
            $xml = 'XML::LibXML'->load_xml(string => $mech->content);
        }) {

            my @messages = $xml->findnodes('/chatter/message');

            my $time = $xml->findvalue('/chatter/info/@gentimeGMT');

            for my $message (@messages) {
                my $id = $message->findvalue('message_id');
                if (! exists $seen{$id}) {
                    $readQ->enqueue([
                        chat => $time,
                                $message->findvalue('author'),
                                $message->findvalue('text') ]);
                    undef $seen{$id};
                }
            }
            $readQ->enqueue([ time => $time, !! @messages ]);

            my $new_from_id = $xml->findvalue(
                '/chatter/message[last()]/message_id');
            $from_id = $new_from_id if length $new_from_id;

            $previous = $xml;
        }

        my @private = get_all_private($mech, \%seen);
        for my $msg (@private) {
            $readQ->enqueue([
                private => @$msg{qw{ author time text }}
            ]) unless exists $seen{"p$msg->{id}"};
            undef $seen{"p$msg->{id}"};
        }
    }
}


{   my %titles;
    sub get_title {
        my ($mech, $id, $name) = @_;
        my $title = $titles{$id};
        unless (defined $title) {
            my $url = PM_URL . $id;
            require XML::LibXML;
            $mech->get($url . ';displaytype=xml');
            my $dom;
            eval {
                $dom = 'XML::LibXML'->load_xml(string => $mech->content)
            } or return;

            $titles{$id} = $title = $dom->findvalue('/node/@title');
        }
        $readQ->enqueue(['title', $id, $name, $title]);
    }
}


sub heartbeat {
    my $ok = $worker_class->$running;
    unless ($ok) {
        warn "Restarting worker...\n";
        eval { $communicate_t->join };
        $communicate_t = $worker_class->create(\&communicate);
        send_login();
    }
}


sub login {
    my ($mech, $username, $password) = @_;
    my $response = $mech->get(PM_URL . LOGIN);
    if ($response->is_success) {
        $mech->submit_form(
            form_number => 1,
            fields      => { user   => $username,
                             passwd => $password,
        });
        return $mech->content !~ /^Oops\.  You must have the wrong login/m
    }
    return
}


sub send_message {
    my ($mech, $message) = @_;
    return unless length $message;

    ( my $msg = $message )
        =~ s/(.)/ord $1 > 127 ? '&#' . ord($1) . ';' : $1/ge;
    my $response = $mech->post(
        PM_URL . SEND,
        Content   => { op      => 'message',
                       node    => SEND,
                       message => $msg }
    );
    my $content = $response->content;
    $readQ->enqueue([ private => '<pm-cb-g>', undef, $content ])
        unless $content =~ /^Chatter accepted/;
}


sub get_all_private {
    my ($mech, $seen) = @_;

    my $url = PM_URL . PRIVATE;

    my ($max, @private);
  ALL:
    while (1) {
        $mech->get($url);
        last unless $mech->content =~ /</;

        my $xml;
        eval { $xml = 'XML::LibXML'->load_xml(string => $mech->content) }
            or last;

        my @messages;
        last unless @messages = $xml->findnodes('/CHATTER/message');

        for my $msg (@messages) {
            my $id = $msg->findvalue('@message_id');
            last ALL if $seen->{"p$id"};

            push @private, {
                author => $msg->findvalue('@author'),
                time   => $msg->findvalue('@time'),
                text   => $msg->findvalue('text()'),
                id     => $id,
            };
        }

        my $first = $messages[0]->findvalue('@message_id');
        $url = PM_URL . PRIVATE . "&prior_to=$first";
    }

    return @private
}


sub gui {
    require Time::Piece;
    my $tzoffset = Time::Piece::localtime()->tzoffset;
    my $last_date = q();

    require Tk;

    require Tk::Dialog;
    require Tk::ROText;
    require Tk::Balloon;

    my $mw = 'MainWindow'->new(-title => TITLE);
    $mw->protocol(WM_DELETE_WINDOW => \&quit);
    $mw->optionAdd('*font', "$font_name $char_size");

    my $read_f = $mw->Frame->pack(-expand => 1, -fill => 'both');
    my $read   = $read_f->ROText(-background => $bg_color,
                                 -foreground => $fg_color,
                                 -wrap       => 'word')
        ->pack(-expand => 1, -fill => 'both');
    $read->tagConfigure(author  => -foreground => $author_color);
    $read->tagConfigure(private => -foreground => $private_color);
    $read->tagConfigure(seen    => -foreground => $seen_color);
    $read->tagConfigure(time    => -foreground => $time_color);

    my $balloon = $mw->Balloon;

    my $last_update_f = $mw->Frame->pack;
    my $last_update = $last_update_f->Label(-text => 'No update yet')
        ->pack(-side => 'left');

    my $write_f = $mw->Frame->pack(-fill => 'x');
    my $write   = $write_f->Text(-height     => 3,
                                 -background => $bg_color,
                                 -foreground => $fg_color,
                                 -wrap       => 'word')
        ->pack(-fill => 'x');

    my $button_f = $mw->Frame->pack;
    my $send_b = $button_f->Button(-text => 'Send',
                                   -command => sub {
                                       $writeQ->enqueue(
                                           [ send => $write->Contents ]);
                                       $write->Contents(q());
                                   }
                                  )->pack(-side => 'left');
    $mw->bind("<$_>", sub { $write->delete('insert - 1 char');
                            $send_b->invoke }
    ) for qw( Return KP_Enter );

    my $seen_b = $button_f->Button(-text => 'Seen',
                                   -command => sub { seen($read, $mw) },
                                   -underline => 0,
                                  )->pack(-side => 'left');
    $mw->bind('<Alt-s>', sub { $seen_b->invoke });

    my $save_b = $button_f->Button(
        -text => 'Save',
        -command => sub { save($mw, $read->Contents) },
        -underline => 1
    )->pack(-side => 'left');
    $mw->bind('<Alt-a>', sub { $save_b->invoke });

    my $opt_b;
    $opt_b = $button_f->Button(
        -text => 'Options',
        -command => sub {
            show_options($mw, $read, $write, $last_update, $opt_b);
        },
        -underline => 0,
    )->pack(-side => 'left');
    $mw->bind('<Alt-o>', sub { $opt_b->invoke });

    my $quit_b = $button_f->Button(-text => 'Quit',
                                   -command => \&quit,
                                   -underline => 0,
                                  )->pack(-side => 'left');
    $mw->bind('<Alt-q>', sub { $quit_b->invoke });

    my ($username, $password);

    $mw->repeat(1000, sub {
        my $msg;
        my %dispatch = (
            time    => sub { update_time($last_update, $msg->[0], $tzoffset,
                                         $msg->[1], \$last_date) },
            login   => sub { login_dialog($mw) },
            chat    => sub { show_message($read, $last_date, $tzoffset,
                                          $balloon, @$msg);
                             increment_unread($mw); },
            private => sub { show_private($read, @$msg, $tzoffset, $balloon);
                             increment_unread($mw); },
            title   => sub { show_title($read, @$msg) },
        );
        while ($msg = $readQ->dequeue_nb) {
            my $type = shift @$msg;
            $dispatch{$type}->();
        }
    });

    $mw->repeat(5000, \&heartbeat);

    $mw->after(1, sub { login_dialog($mw); $write->focus; });

    Tk::MainLoop();
}


sub show_options {
    my ($mw, $read, $write, $last_update, $opt_b) = @_;
    $opt_b->configure(-state => 'disabled');
    my $opt_w = $mw->Toplevel(-title => TITLE . ' Options');

    my $opt_f = $opt_w->Frame(-relief => 'groove', -borderwidth => 2)
        ->pack(-padx => 5, -pady => 5);

    my @opts = (
        [ 'Font Size'        => \$char_size ],
        [ 'Font Family'      => \$font_name ],
        [ 'Background Color' => \$bg_color ],
        [ 'Foreground Color' => \$fg_color ],
        [ 'Author Color'     => \$author_color ],
        [ 'Private Color'    => \$private_color ],
        [ 'Timestamp Color'  => \$time_color ],
        [ 'Seen Color'       => \$seen_color ],
    );

    for my $opt (@opts) {
        my $f = $opt_f->Frame->pack(-fill => 'x');
        $f->Label(-text => $opt->[0])->pack(-side => 'left');
        $f->Entry(-textvariable => $opt->[1])->pack(-side => 'right');
    }

    my $time_f = $opt_f->Frame->pack(-fill => 'x');
    $opt_f->Label(-text => 'Show Timestamps')->pack(-side => 'left');
    $opt_f->Checkbutton(-variable => \(my $show_time = ! $no_time))
        ->pack(-side => 'right');

    my $info_f = $opt_w->Frame(-relief => 'groove', -borderwidth => 2)
        ->pack(-padx => 5, -pady => 5);
    $info_f->Label(-justify => 'left',
                   -text => join "\n",
                       'Threading model:',
                       ($mce ? ('MCE::Hobo '     . $MCE::Hobo::VERSION,
                                'MCE::Shared '   . $MCE::Shared::VERSION)
                             : ('threads '       . $threads::VERSION,
                                'Thread::Queue ' . $Thread::Queue::VERSION)
                       ),
                       'Stack size: ' . 2 ** $stack_size
    )->pack(-side => 'left', -padx => 5);

    my $button_f = $opt_w->Frame->pack(-padx => 5, -pady => 5);
    my $apply_b = $button_f->Button(
        -text => 'Apply',
        -command => sub{
            update_options($mw, $read, $write, $last_update, $show_time);
            $opt_w->destroy;
            $opt_b->configure(-state => 'normal');
        },
        -underline => 0,
    )->pack(-side => 'left');
    $opt_w->bind('<Alt-a>', sub { $apply_b->invoke });

    my $cancel_b = $button_f->Button(
        -text => 'Cancel',
        -command => my $cancel_s = sub {
            $opt_w->destroy;
            $opt_b->configure(-state => 'normal');
        },
    )->pack(-side => 'left');
    $opt_w->bind('<Escape>', $cancel_s);
    $opt_w->protocol(WM_DELETE_WINDOW => $cancel_s);
}


sub update_options {
    my ($mw, $read, $write, $last_update, $show_time) = @_;
    $mw->optionAdd('*font', "$font_name $char_size");
    for my $part ($read, $write, $last_update) {
        $part->configure(-font => $mw->fontCreate(
                                  -family => $font_name,
                                  -size   => $char_size,
                                  ),
                         (-bg  => $bg_color) x ($last_update != $part),
                         -fg   => $fg_color,
        );
    }
    $read->tagConfigure(author  => -foreground => $author_color);
    $read->tagConfigure(private => -foreground => $private_color);
    $read->tagConfigure(seen    => -foreground => $seen_color);
    $read->tagConfigure(time    => -foreground => $time_color);
    $no_time = ! $show_time;
}


sub show_title {
    my ($read, $id, $name, $title) = @_;
    my $tag = "browse:$id|$name";
    my ($from, $to) = ('1.0');
    while (($from, $to) = $read->tagNextrange($tag, $from)) {
        $read->delete($from, $to);
        $read->insert($from, "[$title]", [$tag]);
        $from = $to;
    }
}


sub save {
    my ($mw, $contents) = @_;
    my $file = $mw->getSaveFile(-title => 'Save the history to a file');
    return unless defined $file;

    if (open my $OUT, '>', $file) {
        print {$OUT} $contents;
    } else {
        $mw->messageBox(-title => "Can't save",
                        -icon  => 'error',
                        -message => "'$file' can't be opened for writing",
                        -type => 'Ok'
        );
    }
}


sub increment_unread {
    my ($mw) = @_;
    my $title = $mw->cget('-title');
    if ($title =~ s/([0-9]+)/$1 + 1/e) {
        $mw->configure(-title => $title);
    } else {
        $mw->configure(-title => '[1] ' . TITLE);
    }
}


sub seen {
    my ($read, $mw) = @_;
    while (my ($from, $to) = $read->tagNextrange('unseen', '1.0')) {
        $read->tagRemove('unseen', $from, $to);
        $read->tagAdd('seen', $from, $to);
    }
    $mw->configure(-title => TITLE);
}


sub decode {
    require Encode;
    require charnames;
    my ($msg) = @_;
    $msg = Encode::decode('UTF-8', $msg);
    $msg =~ s/&#(x?)([0-9]+);/$1 ? chr hex $2 : chr $2/ge;
    $msg =~ s/([^\0-\x{FFFF}])/
              "\x{2997}" . charnames::viacode(ord $1) . "\x{2998}"/ge
        if 'MSWin32' eq $^O;
    return $msg
}


sub show {
    my ($text, $timestamp, $author, $message, $private, $balloon) = @_;

    $text->insert(end => "<$timestamp> ", ['time']) unless $no_time;
    $text->insert(end => "[$author]: ",
                  [ $private ? 'private' : 'author']);

    my ($line, $column) = split /\./, $text->index('end');
    --$line;
    $column += (3 + length($timestamp)) * ! $no_time + 4 + length $author;
    $text->insert(end => "$message\n", ['unseen']);

    while ($message =~ m{\[(\s*(?:
                                 https?
                                 | (?:meta)?mod | doc
                                 | id
                                 | wp
                               )://.+?\s*)\]}gx
    ) {
        my ($url, $name) = split /\|/, $1;
        my $from = $line . '.'
                 . ($column + pos($message)
                 - length(length $name ? "[$url|$name]" : "[$url]"));
        my $to = $line . '.' . ($column + pos $message);
        $text->delete($from, $to);

        $name = $url unless length $name;
        s/^\s+//, s/\s+$// for $name, $url;
        $url =~ s{^(?:(?:meta)?mod|doc)://}{http://p3rl.org/};
        $url =~ s{^wp://}{https://en.wikipedia.org/wiki/};

        my $tag = "browse:$url|$name";

        if ($url =~ m{^id://([0-9]+)}) {
            my $id = $1;
            ask_title($id, $url) if $name eq $url;
            $url = PM_BROWSE_URL . $id;
            $tag = "browse:$id|$name";
        }

        $text->tagConfigure($tag => -underline => 1);
        $text->insert($from, "[$name]", [$tag]);
        $text->tagBind($tag, '<Enter>',
                       sub { $balloon->attach($text,
                                              -balloonmsg      => $url,
                                              -state           => 'balloon',
                                              -balloonposition => 'mouse') });
        $text->tagBind($tag, '<Leave>', sub { $balloon->detach($text) });
        $text->tagBind($tag, '<Button-1>', sub { browse($url) });
    }
    $text->see('end');
}


sub ask_title {
    my ($id, $name) = @_;
    $writeQ->enqueue(['title', $id, $name]);
}


sub browse {
    my ($url) = @_;
    my $action = {
        MSWin32 => sub { system 1, qq{start "$url" /b "$url"} },
        darwin  => sub { system qq{open "$url" &} },
    }->{$^O}    || sub { system qq{xdg-open "$url" &} };
    $action->();
}


sub show_message {
    my ($text, $last_date, $tzoffset, $balloon,
        $timestamp, $author, $message) = @_;

    $message = decode($message);
    $timestamp = convert_time($timestamp, $tzoffset)
                 ->strftime('%Y-%m-%d %H:%M:%S');

    substr $timestamp, 0, 11, q() if 0 == index $timestamp, $last_date;
    show($text, $timestamp, $author, $message, 0, $balloon);
}


sub show_private {
    my ($text, $author, $time, $msg, $tzoffset, $balloon) = @_;
    $msg = decode($msg);
    $msg =~ s/[\n\r]//g;

    if (defined $time) {
        local $ENV{TZ} = 'America/New_York';
        my $est = Time::Piece::localtime()->tzoffset;
        $time = 'Time::Piece'->strptime($time, '%Y-%m-%d %H:%M:%S')
              - $est + $tzoffset;
    } else {
        $time = Time::Piece::localtime();
    }
    $time = $time->strftime('%Y-%m-%d %H:%M:%S');

    show($text, $time, $author, $msg, 1, $balloon);
}


sub convert_time {
    my ($server_time, $tzoffset) = @_;
    my $local_time = 'Time::Piece'->strptime(
        $server_time, '%Y-%m-%d %H:%M:%S'
    ) + $tzoffset;  # Assumption: Server time is in UTC.
    return $local_time
}


sub update_time {
    my ($last_update, $server_time, $tzoffset, $should_update, $last_date)
        = @_;
    my $local_time = convert_time($server_time, $tzoffset);
    $last_update->configure(
        -text => 'Last update: '
                 . $local_time->strftime('%Y-%m-%d %H:%M:%S'));
    $$last_date = $local_time->strftime('%Y-%m-%d') if $should_update;
}


{   my ($login, $password);
    sub send_login {
        $writeQ->enqueue([ 'login', $login, $password ]);
    }

    sub login_dialog {
        my ($mw) = @_;

        my $dialog = $mw->Dialog(-title          => 'Login',
                                 -default_button => 'Login',
                                 -buttons        => [qw[ Login Cancel ]]);

        my $username_f = $dialog->Frame->pack(-fill => 'both');
        $username_f->Label(-text => 'Username: ')
            ->pack(-side => 'left', -fill => 'x');
        my $username_e = $username_f->Entry->pack(-side => 'left');
        $username_e->focus;

        my $password_f = $dialog->Frame->pack(-fill => 'both');
        $password_f->Label(-text => 'Password: ')
            ->pack(-side => 'left', -fill => 'x');
        my $password_e = $password_f->Entry(-show => '*')->pack(-side => 'right');

        my $reply = $dialog->Show;
        quit() if 'Cancel' eq $reply;

        ($login, $password) = ($username_e->get, $password_e->get);
        send_login();
    }
}


sub quit {
    $writeQ->enqueue(['quit']);
    $communicate_t->join;
    Tk::exit();
}


=head1 NAME

pm-cb-g - A GUI client to PerlMonks' Chatter Box

=head1 SYNOPSIS

  pm-cb-g -a blue -b white -c 12 -f black -F Helvetica
          -p magenta -s 15 -S darkgray -t darkcyan [ -h -m -n ]

=head1 OPTIONS

Use an integer for I<size>, color name or C<#RRGGBB> code for
I<color>. The default values are shown in the Synopsis above.

=over

=item B<a|author_color> I<color>

The color to display the names of authors of public messages.

=item B<b|bg_color> I<color>

The background color of the application.

=item B<c|char_size> I<size>

The size of all the characters.

=item B<f|fg_color> I<color>

The foreground colour of the new messages.

=item B<F|font_name> I<font>

The font for all the characters.

=item B<h|help>

Prints options and arguments.

=item B<m|mce>

Use L<MCE::Shared> and L<MCE::Hobo> instead of L<threads> and
L<Thread::Queue>.

=item B<n|no_time>

Don't show time stamps.

=item B<p|private_color> I<color>

The color for the authors of private messages.

=item B<s|stack_size> I<size>

Needed for L<threads>. Use a higher number if the program doesn't work
with the default value.

=item B<S|seen_color> I<color>

The color for already read messages.

=item B<t|time_color> I<color>

The color for time stamps.

=back
